FROM ubuntu:20.04
# Update and install required packages
RUN apt-get update && apt-get install -y \
  curl \
  gnupg \
  lsb-release \
  && rm -rf /var/lib/apt/lists/*
# Get varibles from .env file
# ARG S3_ENDPOINT
# ARG AWS_S3_BUCKET_NAME
# ARG AWS_S3_ACCESS_KEY_ID
# ARG AWS_S3_SECRET_ACCESS_KEY

# Install Node.js and npm - may become depricated
# RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
# RUN apt-get install -y nodejs
# RUN npm install -g npm@9.8.1
# RUN apt update 
# RUN apt upgrade -y
# RUN apt install nodejs -y
# RUN apt install npm -y
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
RUN apt-get install -y nodejs
# RUN wget -q -O - https://www.postgresql.org/media/keys/BAAA3GF9.asc | apt-key add
# RUN wget -q -O - https://www.postgresql.org/media/keys/BAAA3GF9.asc
# RUN apt-key add BAAA3GF9.asc
# RUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo apt-key add -


# RUN apt-get update && apt-get install -y ca-certificates curl gnupg
# RUN mkdir -p /etc/apt/keyrings
# RUN touch /etc/apt/keyrings/nodesource.gpg

# RUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor --no-tty --batch -o /etc/apt/keyrings/nodesource.gpg


# RUN NODE_MAJOR=20
# RUN echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
# RUN apt-get update && apt-get install nodejs -y && apt-get install npm -y





# Install n8n
RUN npm install -g n8n
#Install community node 
WORKDIR /root/.n8n/nodes/node_modules
RUN npm install n8n-nodes-python
RUN npm install n8n-nodes-jsonata
#Install python
RUN apt install python3 -y
RUN apt install python3-pip -y
RUN pip3 install --upgrade pip
RUN apt-get update -y && apt-get upgrade -y
#Install s3fs and dependencies needed
WORKDIR /root/s3
RUN apt install fuse -y
RUN apt-get update
RUN DEBIAN_FRONTEND=noninteractive TZ=America/Denver apt-get install git build-essential libfuse-dev libcurl4-openssl-dev libxml2-dev libssl-dev mime-support automake libtool pkg-config -y
RUN git clone https://github.com/s3fs-fuse/s3fs-fuse.git \
    && cd s3fs-fuse \
    && ./autogen.sh \
    && ./configure --prefix=/usr --with-openssl \
    && make \
    && make install
RUN apt-get install kmod -y
RUN pip3 install --no-deps fuse
RUN pip3 install fuse
RUN apt install fuse
#Install python dependencies to run python on n8n - can be modified for specific n8n use case
RUN pip3 install fire
RUN pip3 install opencv-python
RUN apt-get install libgl1-mesa-glx -y
RUN pip3 install -U scikit-learn scipy matplotlib 

RUN pip3 install imutils numpy dlib face-recognition scipy

RUN pip3 install boto3
# Expose port 5678 for n8n UI/API
EXPOSE 5678

# Install AWS CLI
RUN apt install mandoc
RUN apt install unzip -y
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
RUN unzip awscliv2.zip
RUN ./aws/install


# setup s3fs 
# Mount custom folder to n8n
# RUN echo "s3fs#${AWS_S3_BUCKET_NAME}:/custom /root/.n8n/custom fuse _netdev,allow_other,nonempty,umask=000,uid=50000,gid=50000,passwd_file=/root/s3/.s3fs-creds,use_cache=/tmp,url=${S3_ENDPOINT} 0 0\n" >> /etc/fstab
# RUN echo "s3fs#${AWS_S3_BUCKET_NAME}:/n8n-backup /root/s3/n8n-backup fuse _netdev,allow_other,nonempty,umask=000,uid=50000,gid=50000,passwd_file=/root/s3/.s3fs-creds,use_cache=/tmp,url=${S3_ENDPOINT} 0 0" >> /etc/fstab
RUN printf '#!/usr/bin/env bash  \n\
n8n\
' >> /root/s3/entrypoint.sh
# echo ${AWS_S3_ACCESS_KEY_ID}:${AWS_S3_SECRET_ACCESS_KEY} > /root/s3/.s3fs-creds > /root/s3/.s3fs-creds \n\
# chmod 600 /root/s3/.s3fs-creds \n\
# mkdir /root/.n8n/custom \n\
# mkdir /root/s3/n8n-backup\n\
# mount -a \n\
# cp /root/s3/n8n-backup/database.sqlite /root/.n8n\n\

# RUN printf '#!/usr/bin/env bash  \n\
# rm /root/s3/n8n-backup/database.sqlite\n\
# cp /root/.n8n/database.sqlite /root/s3/n8n-backup/\
# ' >> /root/s3/backup.sh
# RUN chmod 700 /root/s3/backup.sh
RUN chmod 700 /root/s3/entrypoint.sh
ENTRYPOINT [ "/root/s3/entrypoint.sh" ]